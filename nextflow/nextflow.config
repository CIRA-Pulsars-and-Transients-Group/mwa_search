#!/usr/bin/env nextflow

// SOFTWARE VERSION OPTIONS
// ----------------------------------------------------------------------------
params.vcstools_version   = 'master'
params.mwa_search_version = 'master'


params.obsid              = "no_obsid" // MWA observation ID (GPS)

// CLUSTER SPECFIC DEFAULTS
// ----------------------------------------------------------------------------
//hostname = "$HOSTNAME".replace("-", "")
hostname = 'farnarkle2'
if ( hostname.startsWith("garrawarla") ) {
    // Set up for Pawsey's Garrawarla cluster

    // Set up containers
    process.module = 'singularity/3.7.4'
    singularity {
        enabled = true
        runOptions = '--nv -B /nvmetmp'
        envWhitelist = 'SINGULARITY_BINDPATH, SINGULARITYENV_LD_LIBRARY_PATH'
    }
    params.containerDir = '/pawsey/mwa/singularity'

    // Default directories
    params.module_dir = '/pawsey/mwa/software/python3/modulefiles'
    params.presto_module_dir = '/pawsey/mwa/software/python3/modulefiles'
    params.presto_module = 'master'
    params.basedir = '/astro/mwavcs/${USER}'
    params.scratch_basedir = '/astro/mwavcs/${USER}'
    params.search_dir = '/astro/mwavcs/${USER}/pulsar_search'
    workDir = "/astro/mwavcs/${USER}/${params.obsid}_work"

    process {
        cache = 'lenient'
        // Resource set up
        withLabel: 'gpu|cpu|download' {
            cpus = 1
            executor = 'slurm'
            memory = "10 GB"
        }
        withLabel: gpu {
            queue = 'gpuq'
        }
        withLabel: cpu {
            queue = 'workq'
        }
        withLabel: large_mem {
            memory = "16 GB"
        }
        withLabel: download {
            queue = 'copyq'
            executor = 'slurm-zeus'
        }
        // Software dependency set up
        withLabel: vcsbeam {
            clusterOptions = "--gres=gpu:1  --tmp=${temp_mem}GB"
            scratch '/nvmetmp'
            //container = "file:///${params.containerDir}/vcstools/vcstools_${params.vcstools_version}.sif"
            beforeScript "module use ${params.module_dir}; module load vcstools/${params.vcstools_version}"
        }
        withLabel: vcstools {
            beforeScript "module use ${params.module_dir}; module load vcstools/${params.vcstools_version}"
        }
        withLabel: presto {
            clusterOptions { "--export=NONE --tmp=${ (int) ( 0.12 * obs_length * Float.valueOf(dm_values[3]) / Float.valueOf(dm_values[5]) ) }MB" }
            scratch '/nvmetmp'
            container = "file:///${params.containerDir}/presto/presto.sif"
        }
    }
    executor.$slurm.queueSize = 1000
    executor.submitRateLimit = '100 sec'

    // Beamforming benchmarks
    //params.bm_read  =  0.172 //this read benchmark is not always sufficent
    //params.bm_read  =  3.000 //overkill
    params.bm_read  =  1.000
    params.bm_cal   =  0.091
    params.bm_beam  =  0.033
    params.bm_write =  0.390

    params.max_pointings = 20
    params.max_cpus_per_node = 38 // leaves 2 for the gpuq
    params.max_gpu_jobs = 48
}
else if ( hostname.startsWith("farnarkle") ) {
    // Set up for Swinburnes's Ozstar cluster

    // Set up containers
    //process.module = 'apptainer/latest'
    singularity {
        enabled = true
        runOptions = '-B /fred --nv'
    }
    params.containerDir = '/fred/oz125/container_images'

    // Default directories
    params.module_dir = '/fred/oz125/software/modulefiles'
    params.presto_module_dir = '/apps/users/pulsar/skylake/modulefiles'
    params.presto_module = 'd6265c2'
    params.basedir = '/fred/oz125/vcs'
    params.scratch_basedir = '/fred/oz125/vcs'
    params.search_dir = "/fred/oz125/${USER}/pulsar_search"
    workDir = "/fred/oz125/${USER}/${params.obsid}_work"

    process {
        module = 'apptainer/latest'
        cache = 'lenient'
        // Resource set up
        withLabel: 'gpu|cpu' {
            executor = 'slurm'
            cpus = 1
        }
        withLabel: gpu {
            queue = 'skylake-gpu'
            memory = "25 GB"
        }
        withLabel: cpu {
            queue = 'skylake'
            memory = "3 GB"
        }
        withLabel: large_mem {
            memory = "8 GB"
        }
        // Software dependency set up
        withLabel: vcsbeam {
            clusterOptions = { "--gres=gpu:1  --tmp=${temp_mem}GB" }
            scratch = '$JOBFS'
            beforeScript = "module use ${params.module_dir}; module load vcstools/${params.vcstools_version}"
        }
        withLabel: vcstools {
            beforeScript = "module use ${params.module_dir}; module load vcstools/${params.vcstools_version}"
        }
        withLabel: presto {
            clusterOptions = { "--export=NONE --tmp=${ (int) ( 0.12 * obs_length * Float.valueOf(dm_values[3]) / Float.valueOf(dm_values[5]) ) }MB" }
            scratch = '$JOBFS'
            beforeScript = "module use ${params.module_dir}; module load presto/min_path"
        }
    }
    executor.$slurm.queueSize = 1000
    executor.submitRateLimit = '100 sec'

    // Beamforming benchmarks
    params.bm_read  = 0.366
    params.bm_cal   = 0.115
    params.bm_beam  = 0.041
    params.bm_write = 0.071

    params.max_pointings = 120
    params.max_gpu_jobs = 120
}
else if ( hostname.startsWith("x86") ) {
    // Set up for the China SKA Region Centre Prototype's ARM cluster

    process {
        cache = 'lenient'
        // Resource set up
        withLabel: 'gpu|cpu|cpu_large_mem' {
            executor = 'slurm'
            cpus = 1
        }
        withLabel: gpu {
            queue = 'all-gpu'
            memory = "30 GB"
        }
        withLabel: cpu {
            queue = 'purley-cpu'
            memory = "3 GB"
        }
        withLabel: large_mem {
            memory = "8 GB"
        }
        // Software dependency set up
        withLabel: vcsbeam {
            clusterOptions = "--gres=gpu:1"
            scratch '/ssd'
            //container = "file:///${params.containerDir}/vcstools/vcstools_${params.vcstools_version}.sif"
            beforeScript "module use ${params.module_dir}; module load vcstools/${params.vcstools_version}"
        }
        withLabel: vcstools {
            beforeScript "module use ${params.module_dir}; module load vcstools/${params.vcstools_version}"
        }
        withLabel: presto {
            container = "file:///${params.containerDir}/presto/presto.sif"
        }
    }
    executor.$slurm.queueSize = 1000
    executor.submitRateLimit = '100 sec'

    // Set up containers
    singularity {
        enabled = true
        runOptions = '-B /o9000'
    }
    params.containerDir = '/o9000/MWA/Pulsar/vcs/singularity_images'

    // Default directories
    params.module_dir = '/home/app/modulefiles/'
    params.presto_module_dir = '/home/app/modulefiles/'
    params.presto_module = 'cpu-master'
    params.basedir = '/o9000/MWA/Pulsar/vcs'
    params.scratch_basedir = '/o9000/MWA/Pulsar/vcs'
    params.search_dir = '/o9000/MWA/Pulsar/vcs/candidates'

    workDir = "/o9000/MWA/Pulsar/vcs/${params.obsid}/${env.USER}_work"

    // Beamforming benchmarks
    //params.bm_read  = 0.266 previous benchmark
    params.bm_read  = 0.366*2
    params.bm_cal   = 0.070*2
    params.bm_beam  = 0.120*2
    params.bm_write = 0.013*2

    params.max_pointings = 120
    params.max_gpu_jobs = 120
}
else {
    // No recognised hostname so assuming defaults

    // Resource set up
    executor.name = 'local'
    executor.queueSize = 8

    // Software dependency set up
    process {
        withLabel: vcsbeam {
            container = "cirapulsarsandtransients/vcstools:${params.vcstools_version}"
        }
        withLabel: vcstools {
            container = "cirapulsarsandtransients/vcstools:${params.vcstools_version}"
        }
        withLabel: presto {
            container = "nickswainston/presto:realfft_docker"
        }
    }

    // Set up containers
    docker.enabled = true

    // Default directories
    params.basedir = './'
    params.scratch_basedir = './'
    params.search_dir = './'

    // Beamforming benchmarks
    params.bm_read  = 0.366*2
    params.bm_cal   = 0.070*2
    params.bm_beam  = 0.120*2
    params.bm_write = 0.013*2

    params.max_pointings = 10
    params.max_gpu_jobs = 1
}


// BEAMFORMING OPTIONS
// ----------------------------------------------------------------------------
params.obsid              = "no_obsid" // MWA observation ID (GPS)
params.calid              = "no_calid" // MWA calibration observation ID (GPS)
params.pointings          = null       // Space seperated pointings in the format HH:MM:SS_DD:MM:SS
params.pointing_file      = null       // Path to a file containing a pointing on each line in the format HH:MM:SS_DD:MM:SS
params.bestprof_pointings = null       // Directory of bestprof files from which pointings will be extracted

// Observation length options
params.begin = 0     // Beginning of the observation (GPS)
params.end   = 0     // End of the observation (GPS)
params.all   = false // Use the whole obervation (GPS)

// Beamforming type options
params.summed   = true  // Sum the Stoke paramters
params.incoh    = false // Also produce an incoherent beam
params.ipfb     = false // Also produce a high time resolution Inverse Polyphase Filter Bank beam

// Calibration options
params.offringa = false // Use offringa calibration solution instead of RTS
// Default directory of calibration solutions
if ( params.offringa ) {
    params.didir = "${params.scratch_basedir}/${params.obsid}/cal/${params.calid}/offringa"
}
else {
    params.didir = "${params.scratch_basedir}/${params.obsid}/cal/${params.calid}/rts"
}

// File and directory optins
params.no_combined_check = false // Don't perform a check of the VCS files
params.publish_fits      = false // Publish the fits files to the sub directories

// PULSAR SEARCH OPTIONS
// ----------------------------------------------------------------------------
params.cand = "Blind" // Label given to output files
params.sp   = false   // Perform only a single pulse search
params.publish_all_prepfold = false // Output all prepfold files (redundant if using the calssifier module)

// Dispersion Measure options
params.dm_min          = 1    // Minimum DM
params.dm_max          = 250  // Maximum DM
params.dm_min_step     = 0.02 // Minimum DM step (lowering increases sensitivity)
params.dm_max_step     = 0.5  // Maximum DM step (lowering increases sensitivity)
params.max_dms_per_job = 5000 // Maximum number of DM steps per job. Decrease to make smaller jobs

// Defaults for the accelsearch command
params.nharm      = 16    // Number of harmonics to search
params.min_period = 0.001 // Min period to search for in sec (ANTF min = 0.0013)
params.max_period = 30    // Max period to search for in sec (ANTF max = 23.5)
params.zmax       = 0     // Maximum acceleration to search (0 will do a simpler periodic search)


// params.out_dir = "${params.search_dir}/${params.obsid}_candidates"


// FOLLOW UP OPTIONS
// ----------------------------------------------------------------------------

params.bins   = 128     // Number of profile bins
params.subint = 60      // Number of time subintergrations
params.nchan  = 48      // Number of frequency subchannels
params.pulsar = ""      // Pulsar name
params.period = 0.90004 // Period in seconds
params.dm     = 23.123  // Dispersion measure

// // Work out some estimated job times
// if ( "$HOSTNAME".startsWith("farnarkle") ) {
//     // In seconds
//     search_dd_fft_acc_dur = obs_length * 5.0
//     prepfold_dur = obs_length * 24.0
//     presto_python_load = "module use ${params.presto_module_dir}; module load presto/${params.presto_module}; module load python/2.7.14; module load matplotlib/2.2.2-python-2.7.14"
// }
// else if ( "$HOSTNAME".startsWith("garrawarla") ) {
//     // In seconds
//     search_dd_fft_acc_dur = obs_length * 5.0
//     prepfold_dur = obs_length * 16.0
//     presto_python_load = ""
// }
// else {
//     search_dd_fft_acc_dur = 14400
//     prepfold_dur = 7200
//     presto_python_load = ""
// }
// if ( params.zmax != 0 ) {
//     search_dd_fft_acc_dur *= 4
// }

// if ( params.max_dms_per_job != 5000 ) {
//     // If using non default max_dms_per_job then use a make the groupTuple size sudo infinite
//     total_dm_jobs = 10000
// }
// // If doing an acceleration search, lower the number of DMs per job so the jobs don't time out
// else if ( params.zmax == 0 ) {
//     // Periodic search defaults
//     total_dm_jobs = 6
// }
// else {
//     // Accel search defaults
//     total_dm_jobs = 24
//     params.max_dms_per_job = 128
// }